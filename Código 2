//Programa que enlista productos de un supermercado con sus precios, tipo y código identificador
#include <iostream>	//Librería para datos de entrada y salida
#include <fstream>	//Librería para poder leer en ficheros o escribir en estos
#include <conio.h>	//Librería usada para dar presentación al texto en la consola

using namespace std; 	// Para abreviar el uso de comandos de entrada y salida

//estructura llamada Nodo para guardar los productos de nuestra lista
struct Node{
	int 	id;            //id del producto
	char 	producto[30];  //nombre del producto
	double 	precio;        //precio del producto
	char	categoria[20]; //categoria del producto
	Node	*ant;          //apuntador hacia el Nodo del producto anterior
	Node	*sig;          //apuntador hacia el Nodo del producto siguiente
};

//Clase para generar la lista que contiene todos los productos del supermercado
class LinkedList{
	private: 	//Los atributos de la lista se mantienen privados con su respectivo modificador de acceso para darles más seguridad 
		Node * first = 0; 	//Se genera una estructura de tipo apuntador para guardar la dirección de memoria del primer nodo
		Node * last = 0;	//Se genera una estructura de tipo apuntador para guardar la dirección de memoria del último nodo
		char * file;		//Nodo usado después para generar el archivo donde se escribirá la información
		int seed = 100;		//Atributo usado para dar su respectivo código a cada producto
		short incr = 10;	//Atributo usado para dar el incremento con respecto al código del producto anterior
		
	public:
		//Constructor usada para agregar a la lista mostrada en consola aquellos artículos que ya habían sido agregados a la lista del archivo
		LinkedList(char *file){		//Como parámetro se usa el archivo de la lista
			this->file = file;		//Se especifica que el archivo que se va a usar es el del parámetro que se mandó
			ifstream archivito;		//Se declara el nombre del archivo que se usará
			Node *aux = NULL;		//Se genera un nodo auxiliar que será el mensajero para traer la información de la lista del archvio a la del programa
			archivito.open(file, ios::binary);	//Se abre el programa de manera binaria
			if(archivito.is_open()){
				//leer del archivo cada cierto número de bytes
				aux = new Node;		//Se establece que la variable auxiliar tendrá un espacio de memoria dinámico
				archivito.read((char*)aux, sizeof(Node));	//Se lee el archivo fila por fila y se guarda la información en la variable auxiliar
				while(!archivito.eof()){	//Este while nos ayudará a movernos hasta llegar al final del archivo
					//y agrega los datos que ya se tenían a la lista ligada
					AddNode(aux, 1);	
					aux = new Node;
					archivito.read((char*)aux, sizeof(Node)); //Se repite el proceso antes del while desde la línea anterior y en ésta
				}
				archivito.close();	//Se cierra el archvivo
			}
		}
		~LinkedList(){	//Se genera un override del constructor anterior
			ofstream archivito;	//Se declara el nombre del archivo que se usará
			archivito.open(file, ios::binary);	//Se abre el archivo para futuras operaciones
			Node *aux = 0, *aux2 = 0;	//Se declaran dos variables auxiliares del tipo estructura Nodo
			if(archivito.is_open()){	
				aux = first;	//La primera auxiliar se iguala al primer elemento de la lista
				while(aux!=0){
					//escribir en el archivo cada nodo aux	
					archivito.write((char*)aux, sizeof(Node));	//Se escribe en el archivo los nuevos elementos de la lista
					aux2 = aux;			//Se asignan los elementos de aux a aux2
					aux = aux->sig;		//Mientras que aux no apunte a NULL o 0, éste seguirá moviéndose a través de la lista
					delete aux2;		//Se elimina el espacio de memoria a donde aux2 apuntaba
				}
				archivito.close(); //Se cierra el archivo
			} 
		}
		Node *getFirst(){	//Función para obtener el atributo first declarado arriba como privado
			return first;
		}
		Node *getLast(){	//Función para obtener el atributo last declarado arriba como privado
			return last;
		}
		
		void AddNode(Node *nuevo, short source)	//Método usado para agregar nodos del archivo a la lista ligada del programa ejecutándose
		//Source = 1, viene de archivo,
		//Source = 0, se captura de pantalla
		{
			nuevo->ant = 0; 	//El campo apuntador de nodo anterior del nodo que se está leyendo se apunta a nulo
			nuevo->sig = 0;		//El campo apuntador de nodo siguiente del nodo que se está leyendo se apunta a nulo
			if(source == 0){	//Si se ingresa desde la consola el nuevo elemento, este if hace que el siguiente elemento tenga un código distinto al anterior (+10)
				nuevo->id = seed + incr;
				seed += incr;
			}
			else{
				seed = nuevo->id;	//Si viene desde el archivo, entonces simplemente se guarda como está
			}
			
			if(first == 0){		//Si es el primer elemento que se ingresará, entonces se le asignará el código para ese producto y tanto el primer como último elemento será igual al que se ingresó
				nuevo->id = seed;
				first = last = nuevo;
			}
			else{
				last->sig = nuevo; //Si no es el primero entonces el apuntador de siguiente de last apuntará al nuevo nodo
				nuevo->ant = last;	//El nodo (su apuntador al anterior) apuntará al que estaba antes del último
				last = nuevo;	//Se declara que el último elemento es igual al nuevo nodo ingresado
			}
		}
		
		void DeleteNode(Node *temp){	//Método para eliminar nodo
			if(first == temp){		//Si el primer elemento es igual al temporal entonces...
				first = temp->sig;	//El apuntador al primer elemento ahora cambiará a apuntar al segundo
				if(temp->sig != 0)	//Si el siguiente elemento es diferente de nulo
					temp->sig->ant = 0;	//Tanto apuntador siguiente como anterior del nodo serán igual a 0 o nulo
			}
			else{	//S no es el primer elemento
				temp->ant->sig = temp->sig;	//Tanto el campo anterior como el siguiente serán iguales al siguiente elemento
				if(temp->sig != 0)	//Si el apuntador no se dirge a nulo
					temp->sig->ant = temp->ant;	//El apuntador siguiente del nodo anterior ahora apuntará al anterior
			}
			delete temp;	//Se elimina el espacio de memoria del nodo temporal
		}
		
		//Busqueda Secuencial por id
		Node *SearchNode(int ID){	//Esta función realiza la busqueda y como parámetro usa el ID del producto
			Node *aux = 0;	//Se crea un nodo auxiliar y se apunta a nul
			bool siloencontre = false;	//Declaración de una variable que se usará después
			aux = first;	//Se iguala el auxiliar al primer elemento de la lista
			while(aux != 0){	//Mientras que el auxiliar sea diferente nulo...
				if(ID == aux->id){	//Si coinciden los códigos...
					siloencontre = true;	//Se encontró el proucto buscaro
					break; //Termina el while
				}
				aux = aux->sig;	//Operación usada para moverse por la lista
			}
			if(siloencontre)	//En dado caso de que se encontrara el ID..
				return aux;		//Se regresa el nodo al cual pertenece ese ID
			else	//Si no...
				return 0;	//No regresa más que un valor nulo
		}
};

//se ingresan las cabeceras de dos funciones que se especifican mas adelante para capturar y mostrar los productos
void CapturaDatos(Node *temp);
void MuestraDatos(Node *temp);

//funcion principal del programa
int main(){
	Node *aux = 0, *nuevo = 0;         //se igualan a cero los nodos auxiliar y nuevo
	int opc = 0, opc2 = 0;             //se declaran dos enteros para saber las opciones que el usuario elige a traves del menú
	Node Temp;                         //se declara un nodo temporal
	char archi[] = "productos.dat";    //se ingresa el nombre del archivo binario en el cual se trabajara 
	
	LinkedList Lista_Productos(archi); //se declara una nueva lista llamada Lista_productos a traves del constructor y utilizando el archivo nombrado anteriormente
	
	do{
			//se limpia la consola y se imprime el menú de opciones a realizar con la lista de productos
		system("cls");
		printf("<<GESTION DE PRODUCTOS>> \n");
		printf("1. Agregar Producto\n");
		printf("2. Buscar por Id (Secuencial)\n");
		printf("3. Mostrar lista de productos\n");
		printf("4. Buscar por Producto (Binaria)\n");
		printf("5. Ordenar por Producto (_Sort)\n");
		printf("6. Ordenar por Precio (_Sort)\n");
		printf("7. Salir\n");
		cin >> opc;    //se registra la seleccion del usuario y luego se utiliza un switch para cada caso del menú
		switch(opc){
			case 1:
					//en el primer caso se agrega un producto
				system("cls");                         //se limpia la consola
				printf("Agregar PRODUCTO\n");          //se imprime lo que se hara que es agregar un producto
				nuevo = new Node;                      //creamos un nuevo nodo
				nuevo->id = 0;                         //declaramos el id de este nuevo producto en 0
				CapturaDatos(nuevo);                   //utilizamos la funcion capturadatos para guardar el producto en el nodo nuevo
				Lista_Productos.AddNode(nuevo, 0);     //agregamos este nodo a la lista y especificamos que fue ingresado por el usuario
				printf("\nDatos agregados");           //confirmamos que los datos han sido guardados correctamente
				_getch();                              //esperamos a que el usuario continue y terminamos este caso
				break;
			case 2:
					//en el segundo caso buscamos productos por su ID y luego preguntamos al usuario que desea hacer con el
				system("cls");                                //limpiamos la consola
				printf("Buscar Producto por ID\n");           //volvemos a mencionar al usuario la opcion que selecciono
				printf("Id: "); cin >> Temp.id;               //guardamos el Id del porducto en nuestro nodo temporal
				aux = Lista_Productos.SearchNode(Temp.id);    //utilizando la funcion searchNode buscamos el id del producto 
				if(aux != 0){                                 //comparamos para ver si el dato se encontro       
					printf("Datos encontrados:\n");       //confirmamos al usuario que se encontro el dato
					MuestraDatos(aux);                    //lo mostramos al usuario
						
						//ahora le preguntamos al usuario si desea simplemente volver, modificar o eliminar el dato encontrado
					printf("Desea:\n 0) Regresar 1) Modificar 2) Eliminar: "); cin >> opc2; 
					switch(opc2){                 
						case 1: //en el caso que se quiera modificar se realiza lo mismo que en el caso que se requiera agregar productos
						{
							CapturaDatos(aux);
							printf("El id-producto %d fue modificado\n", aux->id);
							break;
						}
						case 2: //para eliminar un producto simplemente utilisamos la funcion deletenode
						{
							printf("El producto %s fue eliminado\n", aux->producto);
							Lista_Productos.DeleteNode(aux);
							_getch();
							break;
						}
						default: //en cualquier otro caso simplemente regresamos y damos las gracias
							printf("Gracias por participar");
							break;
					}
				}
				else
					printf("Dato NO Encontrado");
				_getch();
				break;
			case 3:
				system("cls");
				printf("ID\tPRODUCTO\t\tPRECIO\t\tCATEGORIA\n");
				aux = Lista_Productos.getFirst();
				while(aux != 0){
					printf("%d\t%s\t\t%10.2lf\t\t%s\n",aux->id, aux->producto, aux->precio, aux->categoria);
					aux = aux->sig;
				}
				_getch();
				break;
			case 4:
				break;
		}
	
	}while(opc<7);
	
	printf("\a");
	_getch();
}

void CapturaDatos(Node *temp){
	cout << "Producto: "; 	cin >> temp->producto;
	cout << "Precio: ";		cin >> temp->precio;
	cout << "Categoria: ";	cin >> temp->categoria;
}

void MuestraDatos(Node *temp){
	//printf("Id:\t%d\n",			temp->id);
	printf("Producto:\t%s\n",	temp->producto);
	printf("Precio:\t%10.2lf\n",	temp->precio);
	printf("Categoria:\t%s\n", temp->categoria);
}
