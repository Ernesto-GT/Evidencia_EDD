// Programa en C++ que organiza en una lista de menor a mayor los elementos que se le inserten

#include <iostream> //libreria necesaria para los procesos del programa
using namespace std;//Usado para dar formato a las entradas y salidas del programa

//Declaración de la clase nodo para agregar estos a la lista principal
class nodo {
   public:	//Atributos y métodos (o constructores) públicos a los que se tiene acceso no limitado gracias al modificador de acceso: public 
    nodo(int v, nodo *sig = NULL)	//Constructor de nodos con sus debidos campos: valor y liga al siguiente nodo
    {
       valor = v;
       siguiente = sig;
    }
	//Atributos privados para que no cualquiera tenga acceso a ellos usando el modificador private
   private:
    int valor;
    nodo *siguiente;
        
   friend class lista;	//Se incluye dentro de esta clase todos los métodos que se declaren dentro de la clase lista
};

typedef nodo *pnodo; //creacion de un sinonimo del tipo de dato nodo

//Comienza la clase lista, la cual anteriormente se mencionó que se incluía en la clase nodo
class lista {
   public:	//Atributos y métodos públicos de esta clase
    lista() { primero = actual = NULL; }	//Al principio se tiene que el primer nodo y el actua apuntarán a la dirección NULL, indicando que está vacía
    ~lista();	//Se le dará un override más adelante a este método
    
    //Cabeceras de funciones y métodos que se definirán unas líneas más abajo
    void Insertar(int v);	//Función para insertar un nodo en la lista dependiendo del valor que le sea mandado como parámetro
    void Borrar(int v);		//Función para borrar un nodo de la lista
    bool ListaVacia() { return primero == NULL; } 	//Método para verificar si se tiene una lista vacía
    void Mostrar();	//Método usado para mostrar los elementos de la lista
    void Siguiente();	//Método para moverse más fácilmente entre los nodos de la lista
    void Primero();		//Método para establecer nuevo elemento como primero de la lista
    void Ultimo();		//Método para situar el puntero al final de la lista
    bool Actual() { return actual != NULL; }	//Función para saber si la posición actua es diferente de NULL
    int ValorActual() { return actual->valor; }		//Función usada para devolver el valor del nodo que se aborda
    
   private:	//Nodos establecidos como privados
    pnodo primero;	//Primer elemento de la lista (cabecera)
    pnodo actual;	//Usado para moverse a través de la lista
};

lista::~lista()	//Se le da un override al método declarado anteriormente en la clase lista
{
   pnodo aux;	//Se declara un nodo auxiliar
   
   while(primero) {	//Se vacía la lista al principio del programa
      aux = primero;	//Se establece el auxiliar en la posición del nodo
      primero = primero->siguiente;	//Esta sentencia hace que ahora el nodo primero sea equivalente a su sucesor
      delete aux;	//El nodo declarado como auxiliar se elimina, para luego hacer la misma iteración hasta que la lista esté vacía
   }
   actual = NULL;	//Se declara actual como nulo para que esté vacía
}

//funcion para insertar un elemento en la lista
void lista::Insertar(int v)
{
   pnodo anterior; // creacion de un nodo auxiliar llamado anterior
 
   if(ListaVacia() || primero->valor > v) { // si la lista esta vacia, o el valor a ingresar el mayor al primero, entonces: 
      // Asignamos a lista un nuevo nodo de valor v y
      // cuyo siguiente elemento es la lista actual                    
      primero = new nodo(v, primero);
   }
   else { //En dado caso que a la lista se le quiera insertar otro valor que no sea el primero
      // Buscar el nodo de valor menor a v 
      anterior = primero;
      // Avanzamos hasta el último elemento o hasta que el siguiente tenga 
      // un valor mayor que v 
      while(anterior->siguiente && anterior->siguiente->valor <= v) 
         anterior = anterior->siguiente;
      // Creamos un nuevo nodo después del nodo anterior, y cuyo siguiente
      // es el siguiente del anterior
      anterior->siguiente = new nodo(v, anterior->siguiente);
   }
}

//funcion para borrar algun elemento de la lista
void lista::Borrar(int v)
{
   pnodo anterior, nodo; //creamos las variables necesarias para la funcion
   
   nodo = primero; //hacemos que nodo apunte a primero
   anterior = NULL; //hacemos que anterior apunte a NULL
   while(nodo && nodo->valor < v) { //mientras que la lista no llegue al fin y se busca si el valor del nodo actual es mayor al buscado
      anterior = nodo; //hacemos que anterior apunte a nodo
      nodo = nodo->siguiente; //y hacemos que nodo apunte al nodo siguiente 
   }
   if(!nodo || nodo->valor != v) return; //Si se llegó al final de la lista o el valor insertado no coincide con ninguno, se termina la función
    else { // Borrar el nodo 	//Sí se encontro el valor que se buscaba
      if(!anterior) // Primer elemento 
         primero = nodo->siguiente; //Simplemente se "olvida" su espacio en memoria
      else  // un elemento cualquiera
         anterior->siguiente = nodo->siguiente;	//Se enlaza al anterior con el siguiente de nodo
      delete nodo;	//Se elimina el nodo
   }   
}

//funcion para mostrar todos los elementos de la lista
void lista::Mostrar()
{
   nodo *aux; //creamos un nodo auxiliar 
   
   aux = primero; //hacemos que aux apunte a primero
   while(aux) { //mientras que aux sea dif. de NULL, entra al ciclo
      cout << aux->valor << "-> "; //se imprime en pantalla el valor del nodo aux
      aux = aux->siguiente; // hacemos que aux apunte al nodo siguiente
   }
   cout << endl; //salto de linea
}

//funcion para que actual apunte al siguiente elemento de la lista
void lista::Siguiente()
{
   if(actual) actual = actual->siguiente; //si actual es dif. de NULL, entra al condicional, y hacemos que actual apunte al nodo siguiente 
}

//funcion para que actual apunte a primero;
void lista::Primero()
{
   actual = primero; //hacemos que actual apunte a primero
}

//funcion para que actual apunte al ultimo elemento de la lista
void lista::Ultimo()
{
   actual = primero;  //hacemos que actual apunte a primero
   if(!ListaVacia()) //si la lista no esta vacia entra al condicional
      while(actual->siguiente) Siguiente(); //mientras que actual->siguiente sea dif. de NULL, se ingresa a la funcion Siguiente();
}

int main()//clase main para ejecutar el programa
{
   lista Lista; //objeto para poder ingresar a las funciones de la clase lista
   
   //llamamos a la funcion lista.Insertar, para asignar los valores 20, 10, 40 y 30 a la lista 
   Lista.Insertar(20); 
   Lista.Insertar(10); 
   Lista.Insertar(40);
   Lista.Insertar(30);

	//llamamos a la funcion Lista.Mostrar, para poder ver los elementos que contiene la lsita actualmente
   Lista.Mostrar();

	//ciclo para enlistar los elementos de la lista
   cout << "Lista de elementos:" << endl;
   Lista.Primero(); //llamamos a la funcion Lista.Primero, para hacer que actual apunte al primer elemento
   while(Lista.Actual()) { //evaluamos utilizando la funcion Lista.Actual, que es "mientras actual sea dif. de NULL, entra al ciclo
      cout << Lista.ValorActual() << endl; //imprimimos en pantalla el valor de actual
      Lista.Siguiente(); //hacemos que actual apunte al siguiente elemento 
   }
   
   //llamamos a la funcion Lista.Primero
   Lista.Primero();
   cout << "Primero: " << Lista.ValorActual() << endl; //imprimimos en pantalla el primer elemento de la lista
   
   //llamamos a la funcion Lista.Ultimo
   Lista.Ultimo();
   cout << "Ultimo: " << Lista.ValorActual() << endl; //imprimimos en pantalla el ultimo elemento de la lista 
   
   //llamamos a la funcion Lista.Borrar, para eliminar los elementos 10, 15, 45, 30 y 40
   Lista.Borrar(10); // 10 si exite en la lista, se elimina
   Lista.Borrar(15); // 15 no existe en la lista, no pasa nada
   Lista.Borrar(45); // 45 no existe en la lista, no pasa nada
   Lista.Borrar(30); // 30 si exite en la lista, se elimina
   Lista.Borrar(40); // 40 si exite en la lista, se elimina
   
   	//llamamos a la funcion Lista.Mostrar, para poder ver los elementos que contiene la lsita actualmente
   Lista.Mostrar();

   cin.get(); // funcion para esperar a que el usuario presione una tecla para terminar el programa
   return 0; //fin del programa
}
